<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title> on Arkadios Tsamourliadis </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://atsamour.github.io/</link>
    <language>en-us</language>
    
    
    <updated>Tue, 18 Aug 2015 00:00:00 UTC</updated>
    
    <item>
      <title>Habit@weave Java AAL app</title>
      <link>http://atsamour.github.io/post/Habit@weave-Java-application-for-OpenShift/</link>
      <pubDate>Tue, 18 Aug 2015 00:00:00 UTC</pubDate>
      
      <guid>http://atsamour.github.io/post/Habit@weave-Java-application-for-OpenShift/</guid>
      <description>

&lt;p&gt;OpenShift is Red Hat&amp;rsquo;s Platform-as-a-Service (PaaS) that allows developers to quickly develop, host, and scale applications in a cloud environment. It has decent documentation and relatively steep learning curve.&lt;/p&gt;

&lt;p&gt;After installing &lt;code&gt;Ruby&lt;/code&gt; and &lt;code&gt;RHC&lt;/code&gt;, Openshift&amp;rsquo;s client tool, by following &lt;a href=&#34;https://developers.openshift.com/en/getting-started-overview.html&#34;&gt;these&lt;/a&gt; steps, you can start creating a Java web application following &lt;a href=&#34;https://developers.openshift.com/en/tomcat-getting-started.html&#34;&gt;these&lt;/a&gt; steps.&lt;/p&gt;

&lt;h1 id=&#34;habit-weave:c6caa8a44e148aae679de3cb093da792&#34;&gt;Habit@weave&lt;/h1&gt;

&lt;p&gt;Habit@weave is a web application for the control and monitoring smart homes and wearable devices.
The power consumption graphs and the capability to schedule actions can help the user to make the right decisions for efficient energy saving at home, while the calorie consumption and sleep quality charts may contribute to adoption of habits that improve heath. The user can use the application from a PC, as well as from any other portable device with access to the Internet. It is an initial effort towards a functional Ambient Assisted Living system.
It&amp;rsquo;s also a good starting point for any Java web application with Hibernate JPA and Shiro security frameworks.&lt;/p&gt;

&lt;p&gt;##Demo&lt;/p&gt;

&lt;p&gt;Application&amp;rsquo;s demo runs here &lt;a href=&#34;http://habitat-atsamour.rhcloud.com&#34;&gt;http://habitat-atsamour.rhcloud.com&lt;/a&gt;.
To try the application use these credentials:
* E-mail: &lt;code&gt;test2@gmail.com&lt;/code&gt;
* Password: &lt;code&gt;1234&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://s4.postimg.org/7sibz1n4d/image.png&#34; alt=&#34;Screenshot&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;##Code&lt;/p&gt;

&lt;p&gt;The application&amp;rsquo;s git repo is &lt;a href=&#34;https://github.com/atsamour/Habit-at-weave_openshift-MySQL&#34;&gt;here&lt;/a&gt;.
You can find the sample database used in the application at &lt;a href=&#34;https://s3-eu-west-1.amazonaws.com/atsamourfiles/awesomedb(openshift-MySQL-5.5&#34;&gt;amazon cloud&lt;/a&gt;.zip) (add a database named &lt;code&gt;awesomedb&lt;/code&gt; to the OpenShift MySQL Cartridge and import tables there)&lt;/p&gt;

&lt;p&gt;The folders are organized as a Maven project. Backend is written in Java using javax.servlet API, frontend is based on Bootstrap and implemented with JSP views.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://s13.postimg.org/ryipgphmv/sleep.png&#34; alt=&#34;Screenshot&#34; /&gt;

&lt;img src=&#34;http://s27.postimg.org/mm701vq3n/activity.png&#34; alt=&#34;Screenshot&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Heroku Java example</title>
      <link>http://atsamour.github.io/post/heroku-java-example/</link>
      <pubDate>Mon, 10 Aug 2015 00:00:00 UTC</pubDate>
      
      <guid>http://atsamour.github.io/post/heroku-java-example/</guid>
      <description>

&lt;p&gt;Here &lt;a href=&#34;https://github.com/atsamour/Heroku-java-example&#34;&gt;https://github.com/atsamour/Heroku-java-example&lt;/a&gt; you can find a sample Java web project for &lt;a href=&#34;https//www.heroku.com&#34;&gt;Heroku&lt;/a&gt; PaaS cloud. You can also run it locally with only JRE and Maven installed, as it doesn&amp;rsquo;t requre a seperate application container. It evaluates Heroku&amp;rsquo;s &lt;a href=&#34;http://github.com/jsimone/webapp-runner&#34;&gt;open source&lt;/a&gt; with embedded Tomcat.&lt;/p&gt;

&lt;h2 id=&#34;to-run-locally:20e20672b402207805168c82317f257f&#34;&gt;To run locally&lt;/h2&gt;

&lt;p&gt;First you have to git pull the repo to your PC, then build the application running this command from the local project folder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::term
$ mvn package
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then you just run the application by using the java command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::term
$ java -jar target/dependency/webapp-runner.jar target/*.war
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If everything worked correctly, your application should be accessible at &lt;code&gt;localhost:8080&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;to-run-on-heroku-cloud:20e20672b402207805168c82317f257f&#34;&gt;To run on Heroku cloud&lt;/h2&gt;

&lt;p&gt;First create a Heroku account, install Heroku Toolbelt as described &lt;a href=&#34;https://devcenter.heroku.com/articles/getting-started-with-java#set-up&#34;&gt;here&lt;/a&gt;, then deploy the app on Heroku as described &lt;a href=&#34;https://devcenter.heroku.com/articles/getting-started-with-java#deploy-the-app&#34;&gt;here&lt;/a&gt;.
If everything worked correctly, your should see the application in your browser.&lt;/p&gt;

&lt;h3 id=&#34;to-deploying-a-jar-filer-that-doesn-t-exist-at-maven-repository:20e20672b402207805168c82317f257f&#34;&gt;To deploying a jar filer that doesn&amp;rsquo;t exist at Maven repository&lt;/h3&gt;

&lt;p&gt;Download and put the .jar (e.g.) file to the project&amp;rsquo;s folder (e.g. C:\Users\username\Dropbox\heroku-examples\appfolder)
Then call mvn deploy:deploy-file to actually deploy the jar to &lt;code&gt;repo&lt;/code&gt; folder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:::term
mvn deploy:deploy-file -Durl=file:///C:\Users\username\Dropbox\heroku-examples\appfolder\repo\ -Dfile=json-taglib-0.4.1.jar -DgroupId=atg.taglib.json -DartifactId=json-taglib -Dpackaging=jar -Dversion=0.4.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You are ready to add this dependancy to your main pom file as any other.
more info here: &lt;a href=&#34;https://maven.apache.org/guides/mini/guide-3rd-party-jars-remote.html&#34;&gt;https://maven.apache.org/guides/mini/guide-3rd-party-jars-remote.html&lt;/a&gt;, &lt;a href=&#34;https://devcenter.heroku.com/articles/local-maven-dependencies&#34;&gt;https://devcenter.heroku.com/articles/local-maven-dependencies&lt;/a&gt;s&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
